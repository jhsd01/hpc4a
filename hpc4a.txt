%%cu

#include<stdio.h>
#include<stdlib.h>
# define N 100

__global__ void add(int *a, int *b, int *c)
{
    int tid=blockIdx.x * blockDim.x + threadIdx.x;
    if(tid<N)
    {
        c[tid]=a[tid]+b[tid];
    }
}

int main()
{
    int *a, *b, *c;
    int *d_a, *d_b, *d_c;
    int size=N * sizeof(int);

    a= (int*)malloc(size);
    b= (int*)malloc(size);
    c= (int*)malloc(size);
 
    for(int i=0;i<N;i++)
    {
        a[i]=i;
        b[i]=i*2;
    }
 
    cudaMalloc(&d_a, size);
    cudaMalloc(&d_b, size);
    cudaMalloc(&d_c, size);
 
    cudaMemcpy(d_a, a, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, b, size, cudaMemcpyHostToDevice);
 
    add<<<(N-255)/256, 256>>>(d_a, d_b, d_c);

    cudaMemcpy(c, d_c, size, cudaMemcpyDeviceToHost);
    printf("c[0]=%d, c[%d] = %d",c[0],N-1,c[N-1]);
 
 for(int i=0;i<N-1;i++)
    {
        printf("c[%d]=%d\n",i,c[i]);
    }


    free(a);
    free(b);
    free(c);
 
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
    return 0;
}

